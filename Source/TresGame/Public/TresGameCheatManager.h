// Fill out your copyright notice in the Description page of Project Settings.

#pragma once

#include "CoreMinimal.h"
#include "GameFramework/CheatManager.h"
#include "TresGameCheatManager.generated.h"

/**
 * 
 */
UCLASS()
class TRESGAME_API UTresGameCheatManager : public UCheatManager
{
	GENERATED_BODY()
public:

	UFUNCTION(BlueprintCallable, Category = "TresGameCheatManager")
	void DebugUIHideAllHud() {};

	UFUNCTION(BlueprintCallable, Category = "TresGameCheatManager")
	void DebugShowEQSDebug(bool bEnable) {};
	
	UFUNCTION(BlueprintCallable, Category = "TresGameCheatManager")
	void DebugShowCoopDebug(bool bEnable) {};

	/*void UnlockAllPhotoHologram();
	void TresTeleport(const struct FName& InTag, bool bResetCamera, bool bStateClear);
	void TresSceneCapture(bool InIsEnableInvGamma);
	void ToggleHitchProfilerSmartphoneScreenshot();
	void ToggleHitchProfilerDebugScreenshot();
	void ShowOctreeDebugDraw(int Index);
	void ShowNavigationGroup(int Index);
	void ShowInfluenceMap(bool bEnabled);
	void ShowInfluenceEmitter(bool bEnabled);
	void ShowDebugAIBodyCollision(bool bEnabled);
	void SetPhotoHologramUseDebugMenu(bool bUse);
	void SetPhotoHologramEnableStopActorMeshBonamik(bool bEnable);
	void SetPhotoHologramEnableKeepActorMeshBonamikInEdit(bool bEnable);
	void SetPhotoHologramEnableInputPoseOffsetSupport(bool bEnable);
	void SetPhotoHologramDebugInfo(bool bEnable);
	void SetPhotoHologramActorDebugInfo(bool bEnable);
	void SetDebugShowDetectMarkerInfoFlag(int Type);
	void SetDebugShowDanceInfoFlag(int Type);
	void RemyMakeAllRecipeSuccess();
	void RemyMakeAllRecipeGreatSuccess();
	void PhotoHologramSetInverseRotationInput(bool bInverse);
	void PhotoHologramSetInverseRollInput(bool bInverse);
	void PhotoHologramSetInversePitchInput(bool bInverse);
	void PhotoHologramResetDataTableNewMarkIndex(int Type);
	void PhotoHologramAutoInputDataTableNewMarkIndex(int Type);
	void DebugVerumRexSetSec(float sec);
	void DebugVerumRexSetScore(int Score);
	void DebugVerumRexSetRank(int Rank);
	void DebugVerumRexSetContinuousChain(bool Enable);
	void DebugVerumRexSetChain(int chain);
	void DebugVehicleSpecialShipStockMax(bool bEnable);
	void DebugVehicleSpecialShipDisableOsc(bool bEnable);
	void DebugVehicleSpecialShipCompDebugDisp(bool bEnable);
	void DebugVehicleSpecialShipCheckMode(bool bEnable);
	void DebugVehicleSpecialShipCannonTrack(bool bEnable);
	void DebugVehicleGigasLifeTimeLimit(float InTime);
	void DebugVehicleGigasEnemyGaugeDisp(bool bEnable);
	void DebugVehicleGigasBoostMax(bool bEnable);
	void DebugUIWipe(bool bOut, const class FString& World);
	void DebugUIUnlockMenu(const struct FName& Name, bool Flag);
	void DebugUIUnloadAllUI();
	void DebugUIUnderWater(bool IntoWater);
	void DebugUIUltimaLock(int Command, float fGauge);
	void DebugUIStopFullscreenVideo();
	void DebugUISituationTimerInfinity(bool IsInfinity);
	void DebugUISimplexActionCommand(int nAction, int nKind, float fTimer);
	void DebugUIShowNaviMapInfo(bool bShow);
	void DebugUIShowMoviePlayerList(bool bShow);
	void DebugUIShowHudCommandSituation(int nKind);
	void DebugUIShowAutoSave(bool IsShow);
	void DebugUIShowAllHud();
	void DebugUISetVisibleTargetStatus(bool IsVisible);
	void DebugUISetVisibleSubtitle(bool Visible);
	void DebugUISetVisibleSRideHud(int nVisible);
	void DebugUISetVisibleSpecialShipHud(int nVisible);
	void DebugUISetVisibleSpecialShipGoalMarker(int nVisible);
	void DebugUISetVisibleSpecialShipGoalArrow(int nVisibleL, int nVisibleR);
	void DebugUISetVisibleSpecialShipCannonScope(int nVisible);
	void DebugUISetVisiblePusuButton(bool IsVisible);
	void DebugUISetVisiblePlayerStatus(bool IsVisible);
	void DebugUISetVisibleOperationGuide(bool IsVisible);
	void DebugUISetVisibleMapName(bool IsVisible);
	void DebugUISetVisibleKairiCounter(bool IsVisible);
	void DebugUISetVisibleInformation(bool IsVisible);
	void DebugUISetVisibleGigasHudParts(int nVisible);
	void DebugUISetVisibleGigasHud(int nVisible);
	void DebugUISetVisibleBxMarker(bool IsVisible);
	void DebugUISetVisibleBxLiveFeed(bool IsVisible);
	void DebugUISetVisibleButtonNotice(bool IsVisible);
	void DebugUISetTargetEnemy(bool onoff, bool IsTargetFix);
	void DebugUISetSubCommandCount(int Type, int count);
	void DebugUISetStylePointGauge(float StylePointGauge);
	void DebugUISetSRideHud(int nAction);
	void DebugUISetSpecialShipScopeType(int nType);
	void DebugUISetSpecialShipRestrictCommand(int nAction, int nKind);
	void DebugUISetSpecialShipHud(int nAction, int nMode);
	void DebugUISetSpecialShipGoalMarker(int nPosX, int nPosY, int nDistance);
	void DebugUISetSpecialShipGoalArrow(int nDistance);
	void DebugUISetSpecialShipCannonScopePosition(float fPosX, float fPosY);
	void DebugUISetSpecialShipAlert(int nAlert);
	void DebugUISetSpecialShipActionCommand(int nKind);
	void DebugUISetShortcutPage2(int Page, int Slot, const class FString& KindName);
	void DebugUISetShortcutPage(int Page, int Slot, int Kind);
	void DebugUISetShortcutCommand(const struct FName& Key, int ShortcutType);
	void DebugUISetScoreHud(int nAction, int nKind, int nNum, int nRecord);
	void DebugUISetScoreChainBonus(float fRate, int nCounter);
	void DebugUISetScore(int nScore);
	void DebugUISetSaixStatus(int nKind);
	void DebugUISetSaixHud(int nAction);
	void DebugUISetSaixGauge(float fGauge);
	void DebugUISetRailScopeTargetPosition(float fPosX, float fPosY);
	void DebugUISetRailScopeHud(int nAction);
	void DebugUISetPushCommand(int nAction, int nType, int nKind);
	void DebugUISetPuddingStartCountDown(int nCount);
	void DebugUISetPuddingFinishCountDown(int nCount);
	void DebugUISetPowerUpWindow(int nAction);
	void DebugUISetPlatform(const class FString& Platform);
	void DebugUISetPlaneMissileCursor(int nAction);
	void DebugUISetPlaneHud(int nAction);
	void DebugUISetPlaneBossHud(int nAction);
	void DebugUISetOperationHud(int nAction, int nType);
	void DebugUISetOperationGuide(int nType);
	void DebugUISetNauticalChart(int nAction);
	void DebugUISetMainCommandRightIcon();
	void DebugUISetMagicSubCommand(const struct FName& Key);
	void DebugUISetLuxord(int nKind);
	void DebugUISetLinkSubCommand(const struct FName& Key);
	void DebugUISetLinkCommandNone(bool isNone);
	void DebugUISetKairiCounter(int nKind);
	void DebugUISetItemSubCommand(const struct FName& Key);
	void DebugUISetHudRightAll(int nAction);
	void DebugUISetHudRalphBlockStock(int SlotIndex, int Stock);
	void DebugUISetHudLeftAll(int nAction);
	void DebugUISetHudDrawDeubg(bool IsEnable);
	void DebugUISetHudCommandSneeze(int nMode);
	void DebugUISetHudCommandRestrictFinish(int nAction);
	void DebugUISetHudCommandRestrict(int nKind);
	void DebugUISetHudCommandExWorkshop(int nAction);
	void DebugUISetHudCommandExBaymax(int nAction);
	void DebugUISetHudCommandAttack(int nMode);
	void DebugUISetHpGigasHud(int nMode);
	void DebugUISetHitCountHud(int nAction, int nRecord);
	void DebugUISetHitCount(int nHit);
	void DebugUISetGigasHud(int nAction, int nId);
	void DebugUISetEnableGigasHudCharaMarkerLimitTypeAll(bool Enable);
	void DebugUISetEnableGigasHudCharaMarkerLimitNum(int Num);
	void DebugUISetEnableGigasHudCharaMarkerFriend(bool Enable);
	void DebugUISetEnableGigasHudCharaMarkerEnemy(bool Enable);
	void DebugUISetEnableFloatTexture(bool IsEnable);
	void DebugUISetEnableCommandEx(int nIndex, int nEnable);
	void DebugUISetDisplayScore(int nMode);
	void DebugUISetDisplayHitCount(int nMode);
	void DebugUISetDisableShootFlowCommandText(bool IsVisible);
	void DebugUISetDisableDraw(bool DisableDraw);
	void DebugUISetDanceResult(int nAction, int nRank);
	void DebugUISetDanceRapunzel(int nAction);
	void DebugUISetDanceHud(int nAction, int nRevisit, int nScore, int nChain);
	void DebugUISetDanceGauge(int nGauge, int nMax);
	void DebugUISetDanceChain(int nChain, int nRapunzel);
	void DebugUISetDanceAddedTime(float fTime);
	void DebugUISetDanceActionCommandMission(int nAction, int nKind);
	void DebugUISetDanceActionCommand(int nAction, int nKind);
	void DebugUISetCrabWindow(int nAction, int nNum);
	void DebugUISetCommandMagic(int Kind);
	void DebugUISetButtonCount(float Time);
	void DebugUISetBlackPearlChaseMeter(float fMeter, int nKind);
	void DebugUISetBlackPearlChaseHud(int nAction, float fStart, float fGoal);
	void DebugUISetBaymaxScore(int nScore);
	void DebugUISetBaymaxResult(int nAction, int nRank);
	void DebugUISetBaymaxLiveFeed(int nAction, int nKind);
	void DebugUISetBaymaxHud(int nAction, int nKind);
	void DebugUISetBaymaxCountDown(int nCount);
	void DebugUISetBasicShortcut();
	void DebugUISetAllHudCommand(const struct FName& Key);
	void DebugUISetActionCommand(int Num);
	void DebugUISelectHudRalphBlockSlot(int SlotIndex);
	void DebugUIScreenFilter(bool IsShow, int Type);
	void DebugUIResetUIPartsProfileTime();
	void DebugUIResetPadBtnText();
	void DebugUIPushButtonMark(int nKind);
	void DebugUIPlayFullscreenVideo(const class FString& MovieFilePath);
	void DebugUIPCConfigSetting(const struct FName& ConfigName, float Value);
	void DebugUIPauseActionCommandTimer(bool IsOn);
	void DebugUIOpenTimer(int nPos);
	void DebugUIOpenStreamingLoadScreen();
	void DebugUIOpenSPCamera(int _mode, bool _bBlur);
	void DebugUIOpenShootLockResult();
	void DebugUIOpenShootLock();
	void DebugUIOpenSaveMenu();
	void DebugUIOpenPushCommand();
	void DebugUIOpenPlayerSelectLR(const class FString& NameL, const class FString& NameR);
	void DebugUIOpenNormalLoadScreen();
	void DebugUIOpenNextLv(int Exp);
	void DebugUIOpenMissionGage(const struct FName& dataTableKey);
	void DebugUIOpenLoadMenu();
	void DebugUIOpenLevelUp(int ParamNum, int Num);
	void DebugUIOpenInfomation();
	void DebugUIOpenHundredGame();
	void DebugUIOpenHudUx();
	void DebugUIOpenHudRightAll(int nAction);
	void DebugUIOpenHudRalph();
	void DebugUIOpenHudLeftAll();
	void DebugUIOpenGetMunny(int munny);
	void DebugUIOpenGetItem();
	void DebugUIOpenGetBonus(int ParamNum, int Num);
	void DebugUIOpenGameOverGumi(int HintIndex);
	void DebugUIOpenGameOver(int HintIndex);
	void DebugUIOpenGameHelp(int GameHelpID);
	void DebugUIOpenExtraLoadScreen(int _index);
	void DebugUIOpenEventItem(int ItemIDInt);
	void DebugUIOpenConfigScreenMenu();
	void DebugUIOpenConfigBrightnessMenu();
	void DebugUIOpenClearDataSaveMenu();
	void DebugUIOpenCampMenu();
	void DebugUIOpenButtonCount(float Time);
	void DebugUINaviMapMarkerTest(int MapMarkerType, int PosX, int PosY);
	void DebugUINaviMapMarkerPcStart(bool IsSet);
	void DebugUIMoviePlayerInvokeLog(bool bShowLog, int Index);
	void DebugUILuckyMarkMenuDebugMode(bool _debug);
	void DebugUILStickInput(int nKind);
	void DebugUILSIButtonSetGameMode(int GameModeType, unsigned char GameModeIndex);
	void DebugUILSIButtonSet(unsigned char LSIGameItemIDIndex, bool bClose);
	void DebugUILoadNaviMap(const struct FName& MapName, bool OverwriteMap);
	void DebugUIKeyHole(int nKind);
	void DebugUIHudXehanort(int nKind);
	void DebugUIHudCommandTimeBreak(float fBreakTimer);
	void DebugUIHideHudCommandSituation(int nKind);
	void DebugUIHideAllHud();
	void DebugUIGameHelpFlag(bool Enable, int Index);
	void DebugUIForceUnlockSaveTopMenu(bool IsForceUnlock);
	void DebugUIForceShowNaviMap(bool bShow);
	void DebugUIForceScaleformGC();
	void DebugUIForceExtraLoadScreen(bool _force);
	void DebugUIFixFocusLabel();
	void DebugUIEnableSubtitleSkip(bool IsEnable);
	void DebugUIEnableInvoke(bool bEnable);
	void DebugUIDisplayNaviMap(int DataTableIndex);
	void DebugUIDeleteTargetCursor(const class FString& TargetActorFName, int CursorType, bool bDecision);
	void DebugUIDeleteActionCommand();
	void DebugUICreateUIParts(const class FString& AssetPath);
	void DebugUIConfigSetting(const struct FName& ConfigName, int Value);
	void DebugUICodeMenu(int nKind);
	void DebugUICloseTimer(int nPos);
	void DebugUICloseStreamingLoadScreen();
	void DebugUICloseSPCamera();
	void DebugUICloseShootLock();
	void DebugUIClosePushCommand();
	void DebugUICloseNormalLoadScreen();
	void DebugUICloseInfomation();
	void DebugUICloseHundredGame();
	void DebugUICloseHudUx();
	void DebugUICloseHudRightAll();
	void DebugUICloseHudRalph();
	void DebugUICloseHudLeftAll();
	void DebugUICloseExtraLoadScreen();
	void DebugUICloseButtonCount(bool IsCancel);
	void DebugUICheatAchievement(int nKind);
	void DebugUIChangeWorldHudCommand(const class FString& strWorld);
	void DebugUIChangeGigasHudCommandText(int nKind);
	void DebugUIChallengeScore(int nKind);
	void DebugUIAddTargetCursor(const class FString& TargetActorName, int CursorType);
	void DebugTsPuddingSpawn(int PuddingType);
	void DebugTsPuddingSetSpawnLimit(int Num);
	void DebugTsPuddingDisplayNum(bool bDisplay);
	void DebugTsPuddingDisableTickManager(bool bDisable);
	void DebugTsPuddingDisableRemove(bool bDisable);
	void DebugTsPuddingAddRemove(int AddNum);
	void DebugTresToolLevelActorOnlyVisible();
	class ATresCharPawnBase* DebugSpawnVehicle(int nId, float OffsetX, float OffsetY, float OffsetZ);
	void DebugSnowCurlingSetSec(float sec);
	void DebugSnowCurlingSetScore(int Score);
	void DebugSmartphonePCShadowOff(bool bEnable);
	class ATresEnemyPawnBase* DebugSimpleEnemySet_MaterialReduction(const struct FName& EnemyID, const struct FName& MaterialIdx, float OffsetX, float OffsetY, float OffsetZ);
	class ATresEnemyPawnBase* DebugSimpleEnemySet_DifferentSet(const struct FName& EnemyID, int SetIdx, float OffsetX, float OffsetY, float OffsetZ);
	class ATresEnemyPawnBase* DebugSimpleEnemySet_DifferentKindSet(const struct FName& EnemyID, const struct FName& Kind, float OffsetX, float OffsetY, float OffsetZ);
	class ATresEnemyPawnBase* DebugSimpleEnemySet(const struct FName& EnemyID, float OffsetX, float OffsetY, float OffsetZ);
	void DebugShowValidNavmeshDebug(bool bEnable);
	void DebugShowStaticEQSItemDebug(bool bEnable);
	void DebugShowSpecialPerformActorAttachInfo(bool bEnable);
	void DebugShowSmartphoneDebugInfo(bool bEnable);
	void DebugShowSevenPrincessInfo(bool bEnable);
	void DebugShowPhotoSaveInfo(bool bEnable);
	void DebugShowPhotoMissionInfo(bool bEnable);
	void DebugShowNpcSmartphoneReactionInfo(bool bEnable);
	void DebugShowNavigationBuildTime(bool bEnabled);
	void DebugShowGameplayDebugger(int Index);
	void DebugShowExistencePrizeNum(bool bEnable);
	void DebugShowEQSDebug(bool bEnable);
	void DebugShowEnemyParam(bool bEnable);
	void DebugShowEmitterPool(bool bEnabled);
	void DebugShowDetectMarkerInfo(bool bEnable);
	void DebugShowCoopDebug(bool bEnable);
	void DebugShowCinematicStopAIDebug(bool bEnable);
	void DebugShowCharacter(bool bEnabled);
	void DebugShowBackground(bool bEnabled);
	void DebugShowAttackPermissionDebug(bool bEnable);
	void DebugShowAIDebug(bool bEnable);
	void DebugSetVisibleDebugTextRender(bool IsVisible);
	void DebugSetUsePS4OutputRestrict(bool bUse);
	void DebugSetSmartphoneHLODOff(bool bEnable);
	void DebugSetRaPuddingGrade(int grade);
	void DebugSetRaPuddingForceMissionContinue(bool bContinue);
	void DebugSetPhotoMissionRecordedByID(int missionID);
	void DebugSetPhotoJpegCompressQuality(int Quality);
	void DebugSetPhotoExport(bool IsExport);
	void DebugSetLuckyMarkRecordedByID(int markID);
	void DebugSetLuckyMarkRecordedByCount(int count);
	void DebugSetEnemyHitPointRate(float InRate);
	void DebugSetEnemyHitPoint(int InHitPoint);
	void DebugSetEnableR2PadTriggerDownMode(bool bEnable);
	void DebugSetDefaultPawnNameBTAllSet(const class FString& PawnName);
	void DebugSetDefaultPawnNameBT(const class FString& PawnName);
	void DebugSetDefaultBT(const struct FName& ID);
	void DebugSetDanceEffectColorMode(int mode);
	void DebugSetCameraLocation(float X, float Y, float Z, float Pitch, float Yaw, float Roll);
	void DebugRaycastDisp(bool bEnable);
	void DebugR2Damage(int TgtNo, int DamageNo);
	void DebugR2BadStat(int TgtNo, int BadStatNo);
	void DebugR2AndPadUpDamage(int TgtNo, int DamageNo);
	void DebugR2AndPadRightDamage(int TgtNo, int DamageNo);
	void DebugR2AndPadLeftDamage(int TgtNo, int DamageNo);
	void DebugR2AndPadDownDamage(int TgtNo, int DamageNo);
	void DebugPuddingStopGameTimer(bool bStop);
	void DebugPuddingSetScore(int Score);
	void DebugPuddingFinishGame();
	void DebugPuddingDisplayScore(bool bDisplay);
	void DebugPuddingDisableGameFinish(bool bDisable);
	void DebugPuddingAddScore(int Score);
	void DebugOutputLogTaskList();
	void DebugNpcSwitchBT(const struct FName& NpcID, const class FString& BTFileName);
	void DebugNpcSwitchAIBT(const struct FName& NpcID, const class FString& BTFileName);
	void DebugNpcAIStyleBattleAll(int Style);
	void DebugMiRxSwitchDispDebugInfo();
	void DebugMiRxChangeEnemyState(int dID, bool bIsLoop);
	void DebugMiPuddingDisplayKillNum(bool bDisplay);
	void DebugMiPuddingDisableAttack(bool bDisable);
	void DebugLoadLevelLoop(int loopNum, float WaitTime);
	void DebugLgRxSetZeroRelZ(bool bEnable);
	void DebugLgRxSetRxRushRate(float InRate);
	void DebugLgRxSetRxAttackRate(float InRate);
	void DebugLgRxSetPhase(int InPhase);
	void DebugLgRxSetExecuteIndex(int InIndex);
	void DebugLgRxSetDispLine(bool bEnable);
	void DebugLgRxSetDispInfoPart(bool bEnable);
	void DebugLgRxSetDispInfoAll(bool bEnable);
	void DebugLgRxSetDisableSpecificAction(bool bDisable);
	void DebugLgRxSetDebugPad(bool bEnable);
	void DebugLgRxSetCmdAutoPopup(bool bEnable);
	void DebugLevelRequestStopGimmick(const class FString& ActorName);
	void DebugLevelRequestStopedGimmick(const class FString& ActorName);
	void DebugLevelRequestStartGimmick(const class FString& ActorName);
	void DebugLevelRequestStartedGimmick(const class FString& ActorName);
	void DebugLevelRequestResetGimmick(const class FString& ActorName);
	void DebugLevelRequestForceStopedGimmick(const class FString& ActorName);
	void DebugLevelRequestForceStartedGimmick(const class FString& ActorName);
	void DebugLevelRequestForceDestroyedGimmick(const class FString& ActorName);
	void DebugLevelRequestDestroyGimmickFromLevelName(const struct FName& LevelName);
	void DebugLevelRequestDestroyGimmick(const class FString& ActorName);
	void DebugLevelRequestDestroyedGimmickFromLevelName(const struct FName& LevelName);
	void DebugLevelRequestDestroyedGimmick(const class FString& ActorName);
	void DebugLevelGimmickDamageCheckFree(bool bEnable);
	void DebugLevelActorVisibleOnly(const struct FName& LevelName, int NO);
	void DebugLevelActorVisible(const struct FName& LevelName, int NO, bool Visible);
	void DebugHePuddingSpeedUpDown(bool bUp);
	void DebugHePuddingDisplayNum(bool bDisplay);
	void DebugHePuddingDisableSpeedDown(bool bDisable);
	void DebugFzPuddingDisplayKillNum(bool bDisplay);
	void DebugFullPathSwitchPawnNameBTAllSet(const class FString& PawnName, const class FString& BTFilePath);
	void DebugFullPathSwitchPawnNameBT(const class FString& PawnName, const class FString& BTFilePath);
	void DebugFullPathSwitchClassNameBTAllSet(const class FString& ClassName, const class FString& BTFilePath);
	void DebugFullPathSwitchBT(const struct FName& ID, const class FString& BTFilePath);
	void DebugFriendWarpHome(bool bAdjustCameraBack);
	void DebugFriendStopAI(bool bStop);
	void DebugFriendPlayCameraAnim(const struct FName& ID, const class FString& BTFilePath, int Index);
	void DebugFriendLinkPointMax(int Index);
	void DebugFriendLinkPointLine(int Index);
	void DebugFriendLinkPoint(bool bEnable);
	void DebugFriendHpKeep(bool bEnable);
	void DebugFriendDispSmartphoneCamera(const struct FName& FriendID, bool bEnable);
	void DebugFriendDispPrizeRange(bool bEnable);
	void DebugFriendDispLineAndSphere(const struct FName& FriendID, bool bEnable);
	void DebugFriendDispLine(bool bEnable);
	void DebugFriendDispInfo(const struct FName& FriendID, bool bEnable);
	void DebugFriendDispAnimInfo(const struct FName& FriendID, bool bEnable);
	void DebugForceUnlockBattlePortalRewardActions(int clearCount);
	void DebugForceRaPuddingReload();
	void DebugForceFestivalDanceClear();
	void DebugFlashTracerSetSec(float sec);
	void DebugFlashTracerSetScore(int Score);
	void DebugFlashTracerSetRank(int Rank);
	void DebugFlashTracerForceFinish();
	void DebugFestivalDanceSetTimerStop(bool bStop);
	void DebugFestivalDanceSetChainCount(int chainCount);
	void DebugFestivalDanceForceSpecialPerform();
	void DebugFestivalDanceForceRapunzelDance();
	void DebugFestivalDanceEnableInfiniteChain(bool bEnable);
	void DebugExistEnemyAnnihilation();
	void DebugEQSQueryItemNumList(const class FString& FileName);
	void DebugEnemyWallHitTest(bool bEnable);
	void DebugEnemyWallHitReactionTest(bool bEnable);
	void DebugEnemySwitchBT(const struct FName& EnemyID, const class FString& BTFileName);
	void DebugEnemySwitchAIBT(const struct FName& EnemyID, const class FString& BTFileName);
	void DebugEnemyStrongPointZero(bool bEnable);
	void DebugEnemyRespawn(bool bEnable);
	void DebugEnemyRalphBindTestIdx(int Idx);
	void DebugEnemyPadControlEnable(bool bEnable);
	void DebugEnemyHpKeep(bool bEnable);
	void DebugEnemyBlowRevenge(bool bEnable);
	void DebugEnemyBlowDeath(bool bEnable);
	void DebugEnemyAnnihilation();
	void DebugEnemy_He001a_ShowHpInfo();
	void DebugEnemy_He001a_ShowCollision(int DispType);
	void DebugEnemy_He001a_ShowAction();
	void DebugEnemy_Gigas_GimmickGigasOff();
	void DebugEnemy_dw407_ShowSpawnProjectileLocation(bool bEnable);
	void DebugEnemy_dw401_WaveScrollTest(bool bScroll);
	void DebugEnemy_dw401_StartMickeyRide();
	void DebugEnemy_dw401_CameraCollTest(bool bEnable);
	void DebugEnemy711TornadoInvolveTest(bool bEnable);
	void DebugEnemy711ObjectTest(bool bEnable);
	void DebugEnableItemEvaluation(bool bEnable);
	void DebugEnableFriendLinkPoint(int Index);
	void DebugEnableCutSceneLights(bool bEnabled);
	void DebugEnableAbilityBattlePhotographer(bool bEnable);
	void DebugEEX771SetDebrisBlowNum(int Num);
	void DebugDropItem(bool bEnable);
	void DebugDrawTresLineTrace(bool bDraw);
	void DebugDispEEX771(bool bEnable);
	void DebugDispEEX054(bool bEnable);
	void DebugDispCameraLocation();
	void DebugDiffAnalysisGPU();
	void DebugComNpcVoicePlay(bool bPlay);
	void DebugComNpcUniqueDeleteAll();
	void DebugComNpcStopMove(bool bStop);
	void DebugComNpcStopMasterPose(bool bStop);
	void DebugComNpcStopAction(bool bStop);
	void DebugComNpcSetVoiceMeshType(const struct FName& inMeshName);
	void DebugComNpcSetVoiceMeshIndex(int nIndex);
	void DebugComNpcSetMoveActorNum(int nNum);
	void DebugComNpcSetGroup(const struct FName& InGroupName);
	void DebugComNpcSetGreetType(int nGreet);
	void DebugComNpcSetDispActorNum(int nNum);
	void DebugComNpcSetCameraScale(float fScale);
	void DebugComNpcSetCameraMotion(const struct FName& inRecordName, int nIndex);
	void DebugComNpcSetAction(const struct FName& inSeqName);
	void DebugComNpcDeleteAll();
	void DebugComNpcDelete();
	void DebugComNpcDebugDispType(int nMode);
	void DebugComNpcDebugDisp(bool bDisp);
	void DebugComNpcAdd(const struct FName& inSubName, const struct FName& inNpcName);
	void DebugCharPawnAnnihilation();
	void DebugCaPuddingMoveSpeed(float Speed);
	void DebugCaPuddingDisplayWave(bool bDisplay);
	void DebugCaPuddingDisableCooldownBell(bool bDisable);
	void DebugCallEnemyFunctionNameClassName(const struct FName& ClassName, const struct FName& FunctionName, const struct FName& Param);
	void DebugCallEnemyFunctionIntClassName(const struct FName& ClassName, const struct FName& FunctionName, int Param);
	void DebugCallEnemyFunctionInt(const struct FName& EnemyID, const struct FName& FunctionName, int Param);
	void DebugCallEnemyFunctionFloat(const struct FName& EnemyID, const struct FName& FunctionName, float Param);
	void DebugCallEnemyFunctionClassName(const struct FName& ClassName, const struct FName& FunctionName);
	void DebugCallEnemyFunction(const struct FName& EnemyID, const struct FName& FunctionName);
	void DebugBxPuddingInduction(int Type);
	void DebugBxPuddingDisplayAreaJumpTarget(bool bDisplay);
	void DebugBxPuddingChangeType(int Type);
	void DebugBPEM_SetNextEP_ClampMode(int Index);
	void DebugBPEM_SetEnabledTelemetryLog(bool InbEnabled);
	void DebugBPEM_SetEnabledStatusLog(bool InbEnabled);
	void DebugBPEM_SetEnabledEPLog(bool InbEnabled);
	void DebugBPEM_SetEnabledEmotionMap(bool InbEnabled);
	void DebugBPEM_SetEnabledActionLog(int Index);
	void DebugAlwaysEnableLookAt(const struct FName& PawnName, int mode);
	void DebugAlwaysEnableIK(const struct FName& PawnName, int mode);
	void DebugAllEnemySwitchTurnMove();
	void DebugAllEnemySwitchAI(bool bStop);
	void DebugAllEnemyForceStuck();
	void DebugAllEnemyForceFallenAbyss();
	void DebugAlbumPhotoLoadTest(bool bLoad);
	void DebugActorVisibleFromActorList(bool Visible);
	void DebugActorCollisionEnableFromActorList(bool Enable);
	void DebugAccompanyPawnDispManualOverlap(bool bEnable);
	void DebugAccompanyPawnDispDebugInfo(bool bEnable);
	void DebugAccompanyPawnDispCollisionCheck(bool bEnable);
	void DebugAccompanyPawnDisableLandSpawn(bool bEnable);
	void DebugAccompanyPawnDisableAutoMove(bool bEnable);
	void AllDebugAlwaysEnableLookAt(int mode);
	void AllDebugAlwaysEnableIK(int mode);
	void AllAIDebugDisplay();
	void AIDebugDisplay(const struct FName& PawnName);*/
};
